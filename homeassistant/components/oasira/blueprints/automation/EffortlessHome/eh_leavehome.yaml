blueprint:
  name: Leave Home
  description: Actions to take a predetermined amount of time after no one is at the home
  domain: automation
  author: EffortlessHome
  input:
    leave_trigger_delay:
      name: Delay After Determination of No One At Home To Trigger Actions
      description: Delay After Determination of No One At Home To Trigger Actions
      default: 0
      selector:
        number:
          min: 0.0
          max: 300.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    securityalarm:
      name: Security Alarm
      description: The security alarm to arm in away mode
      selector:
        entity:
          filter:
            - domain:
                - alarm_control_panel
          multiple: false
    doorlock:
      name: Door Lock
      description: The door lock to lock (optional)
      default: []
      selector:
        entity:
          filter:
            - domain:
                - lock
          multiple: false
    off_target:
      name: Lights and switches to turn off
      description: Turn off these lights and switches (optional)
      selector:
        target:
          entity:
            - domain:
                - light
                - switch
    door_sensor:
      name: Window/Door Sensor
      description: Select door or window sensor(s) that you want to check is open.
      selector:
        entity:
          domain:
            - group
    additional_actions:
      name: Additional Actions
      description: Add additional actions to execute (Optional)
      default: []
      selector:
        action: {}
trigger:
  - platform: state
    entity_id: binary_sensor.someone_home_sensor
    from: "on"
    to: "off"
    for:
      hours: 0
      minutes: 0
      seconds: !input leave_trigger_delay
condition:
  - condition: state
    entity_id: binary_sensor.renter_occupied_sensor
    state: "off"
action:
  - service: alarm_control_panel.alarm_arm_away
    target:
      entity_id: !input securityalarm
  - service: homeassistant.turn_off
    data: {}
    target: !input off_target
  - service: lock.lock
    target:
      entity_id: !input doorlock
  - if:
      - condition: or
        conditions:
          - condition: state
            entity_id: !input door_sensor
            state: "on"
    then:
      - service: notify.notify
        metadata: {}
        data:
          message: Door or Window Left Open
  - choose: []
    default: !input additional_actions
